package com.ermain.todotaskapi.backend.controller

import com.ermain.todotaskapi.backend.model.Todo
import com.ermain.todotaskapi.backend.repository.TodoRepository
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.*
import java.util.*
import javax.validation.Valid

@CrossOrigin("*")
@RestController
@RequestMapping("/api/todos")
class TodoController {

    @Autowired
    lateinit var todoRepository: TodoRepository


    /*
        getTodos() method: returns a list of all the available objects (Todo)
            -parameters: None
     */
    @GetMapping("/")
    fun getAllTodos(): List<Todo> {
        return todoRepository.findAll()
    }

    /*
        createTodos() method: create a Todo object and posts it to the data (Todo)
            -parameters:
                    1. Todo object of the form;
                            data class Todo(
                                            val id: String,
                                            val title: String,
                                            val isCompleted: Boolean,
                                            val createdAt: Date)
                         NOTE: The parameter id is autogenerated and the created at parameter
                                is time-stamped for the date which the user posts it
     */
    @PostMapping("/create")
    fun createTodo(@Valid @RequestBody todo: Todo): Todo {
        return todoRepository.save(todo)
    }


    /*
        getTodoById() method: find a Todo object matching the id requested by the user
                    if there is no object with the matching id, a notFound error is
                    returned
            -parameters:
                    1. an id of type String
     */
    @GetMapping("/{id}")
    fun getTodoById(@PathVariable("id") id: String): ResponseEntity<Todo> {
        return todoRepository.findById(id)
                .map { todo -> ResponseEntity.ok().body(todo) }
                .orElse(ResponseEntity.notFound().build())
    }


    /*
        updateTodo() method: updates the Todo object requested by the user based on the
                        parameters passed in by the user
            -parameters:
                    1. an id of type String
                    2. a Todo object which is passed in as the request body of the PUT method
     */
    @PutMapping("/{id}")
    fun updateTodo(@PathVariable("id") id: String, @Valid @RequestBody todo: Todo): ResponseEntity<Todo> {

        // return todoRepository.findById(id)
        return todoRepository.findById(id)
                .map { existingTodo ->
                    val updatedTodo: Todo = existingTodo
                            .copy(title = todo.title, isCompleted = todo.isCompleted)
                    ResponseEntity.ok().body(todoRepository.save(updatedTodo))
                }.orElse(ResponseEntity.notFound().build())
    }


    /*
       deleteTodo() method: deletes the Todo object requested by the user based on the
                       parameters passed in by the user
           -parameters:
                   1. an id of type String
    */
    @DeleteMapping("/{id}")
    fun deleteTodo(@PathVariable id: String): ResponseEntity<Void> {

        return todoRepository.findById(id).map { todo  ->
            todoRepository.delete(todo)
            ResponseEntity<Void>(HttpStatus.OK)
        }.orElse(ResponseEntity.notFound().build())
    }
}